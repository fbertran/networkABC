[{"path":"https://fbertran.github.io/networkABC/articles/vignette.html","id":"abstract","dir":"Articles","previous_headings":"","what":"Abstract","title":"Using the networkABC package","text":"Elucidating gene regulatory network important step towards - standing normal cell physiology complex pathological phenotype. Reverse- engineering consists using gene expression time different experimental conditions discover structure gene network targeted cellular process. fact gene expression data usually noisy, highly correlated, high dimensionality explains need specific statistical methods reverse engineer underlying network. Among known methods, Approximate Bayesian Computation (ABC) algorithms well studied. Due computational overhead application also limited small number genes. work developed new multi-level ABC approach less computational cost. first level, method captures global properties network, scale-freeness cluster- ing coefficients, whereas second level targeted capture local properties, including probability couple genes linked.","code":""},{"path":[]},{"path":"https://fbertran.github.io/networkABC/articles/vignette.html","id":"generation-of-a-network-topology","dir":"Articles","previous_headings":"","what":"Generation of a network topology","title":"Using the networkABC package","text":"Load networkABC package.","code":"library(networkABC)"},{"path":"https://fbertran.github.io/networkABC/articles/vignette.html","id":"examples-and-checks","dir":"Articles","previous_headings":"Generation of a network topology","what":"Examples and checks","title":"Using the networkABC package","text":"generate network, number node targeted clustering coefficient specified. example, following produces network 100 nodes targeted clustering coefficient 0.33 : , can plot network :  simulation show algorithm produces networks clustering coefficient close targeted one generate 500 networks 500 nodes targeted clustering coefficient 0.33 result :  Notice algorithm reach desired values clustering coefficients, network scalefree. example, clustering coefficient 1 implies every couple nodes linked together ; network obviously scale-free.","code":"net<-network_gen(100,0.33) require(network) #> Loading required package: network #>  #> 'network' 1.19.0 (2024-12-08), part of the Statnet Project #> * 'news(package=\"network\")' for changes since last version #> * 'citation(\"network\")' for citation information #> * 'https://statnet.org' for help, support, and other information plot(network(net$network)) f<-function(a){   a<-a[!is.nan(a)] } set.seed(1234) clco<-rep(0,500) for(i in 1:500){   N<-network_gen(500,.33)$net   N<-N+t(N)   clco[i]<-mean(f(abs(networkABC::clusteringCoefficient(N)))) } mean(clco) #> [1] 0.3306789 sd(clco) #> [1] 0.02874285 ggplot2::qplot(clco) #> Warning: `qplot()` was deprecated in ggplot2 3.4.0. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was #> generated."},{"path":"https://fbertran.github.io/networkABC/articles/vignette.html","id":"details-about-the-algorithm","dir":"Articles","previous_headings":"Generation of a network topology","what":"Details about the algorithm","title":"Using the networkABC package","text":"algorithm partially based algorithm Di Camillo, Barbara, Gianna Toffolo, Claudio Cobelli. ”gene network simulator assess reverse engineering algorithms.” Annals New York Academy Sciences. Let us call VV set nodes connected graph GG current iteration tt HH set nodes connected iteration t+1t + 1. VV initialized V=1,...,NV = {1, ...,N}, , NN nodes GG, whereas HH initialized empty set HH. Nodes linked iterative procedure, consists three main steps, explained detail . 1. Three candidate modules generated. structure sampled pool motifs, possibility random changes. number node module set random. algorithm : feedback motif, feedforward motifs loops. 2. score assigned module, one three modules sampled probability proportional score; let us denote sampled module M number nodes mm. 3. mm nodes sampled VV linked graph GG, according selected module structure MM; VV updated deleting m sampled nodes; HH updated adding nodes. end process, VV empty whereas HH composed lot motifs. link motifs together, choose one node motif first position. set nodes considered set VV .","code":""},{"path":[]},{"path":"https://fbertran.github.io/networkABC/articles/vignette.html","id":"the-simpliest-way","dir":"Articles","previous_headings":"Running the ABC algorithm","what":"The simpliest way","title":"Using the networkABC package","text":"can plot results three different ways :  plot show probabilities gene hub. following shows probability couple genes linked : Specifying probability cutoff (minimal probability can say two genes linked), can plot network :  plot, diameter node increases number children whereas color function probability gene hub. can also look error :","code":"set.seed(123) M<-matrix(rnorm(30),10,3) result<-abc(data=M) #> First run of abc to find tolerance #> =============================== #> Iteration=1 #> Accepted:1000 #> Probabilities of clustering coefficients: #> 0.325000 0.349000 0.326000  #> Tolerance value #>       5%  #> 4.523488  #> =============================== #> Beginning main run of abc #> =============================== #> Iteration=1 #> Accepted:45 #> Probabilities of clustering coefficients: #> 0.488889 0.311111 0.200000  #> =============================== #> Iteration=2 #> Accepted:109 #> Probabilities of clustering coefficients: #> 0.522936 0.266055 0.211009  #> =============================== #> Iteration=3 #> Accepted:139 #> Probabilities of clustering coefficients: #> 0.654676 0.201439 0.143885  #> =============================== #> Iteration=4 #> Accepted:163 #> Probabilities of clustering coefficients: #> 0.705521 0.196319 0.098160  #> =============================== #> Iteration=5 #> Accepted:154 #> Probabilities of clustering coefficients: #> 0.753247 0.181818 0.064935  #> =============================== #> Iteration=6 #> Accepted:210 #> Probabilities of clustering coefficients: #> 0.819048 0.142857 0.038095  #> =============================== #> Iteration=7 #> Accepted:200 #> Probabilities of clustering coefficients: #> 0.860000 0.120000 0.020000  #> =============================== #> Iteration=8 #> Accepted:163 #> Probabilities of clustering coefficients: #> 0.865031 0.110429 0.024540  #> =============================== #> Iteration=9 #> Accepted:232 #> Probabilities of clustering coefficients: #> 0.909483 0.077586 0.012931  #> =============================== #> Iteration=10 #> Accepted:238 #> Probabilities of clustering coefficients: #> 0.907563 0.079832 0.012605 networkABC::showHp(result) #>   gene.hubs hubs.proba #> 1         4  0.2282913 #> 2         5  0.2394958 #> 3        10  0.2521008 showNp(result) showNetwork(result,0.3) hist(result$dist)"},{"path":"https://fbertran.github.io/networkABC/articles/vignette.html","id":"using-abc-algorithm-with-full-options","dir":"Articles","previous_headings":"Running the ABC algorithm","what":"Using ABC algorithm with full options","title":"Using the networkABC package","text":"can specify arguments ABC function: details help manual. example :","code":"result<-abc(data=M,             clust_coeffs=0.33, #you can specify more than one clustering coefficient             tolerance=3.5, #maximal distance between simulated and real data             # to accept the network             number_hubs=3,#the number of hubs             iterations=10, #number of iterations             number_networks=1000000,#number of network simulated at each iteration             hub_probs=NA,#specify the a priori probabilty for each gene to be a hub             neighbour_probs=NA,#specify the a priori probability for each couple             #of gene to be linked             is_probs=1)#set this last option to one."},{"path":"https://fbertran.github.io/networkABC/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Frederic Bertrand. Maintainer, author. Myriam Maumy-Bertrand. Author. Khadija Musayeva. Contributor. Nicolas Jung. Contributor. Université de Strasbourg. Copyright holder. CNRS. Copyright holder.","code":""},{"path":"https://fbertran.github.io/networkABC/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Frédéric Bertrand Myriam Maumy-Bertrand (2025). Network Reverse Engineering Approximate Bayesian Computation, R package version 0.9-1. doi:10.32614/CRAN.package.networkABC. Myriam Maumy, Frederic Bertrand (2021). Partial Least Squares Regression Beta Regression Models. useR! 2021, Zurich. https://user2021.r-project.org/participation/technical_notes/t164/technote/.","code":"@Manual{,   title = {Network Reverse Engineering with Approximate Bayesian Computation},   author = {Frederic Bertrand and Myriam Maumy-Bertrand},   year = {2025},   note = {R package version 0.9-1},   url = {https://CRAN.R-project.org/package=networkABC},   doi = {10.32614/CRAN.package.networkABC}, } @Article{,   title = {Network Reverse Engineering with Approximate Bayesian Computation},   author = {Myriam Maumy-Bertrand and Frederic Bertrand},   journal = {user! 2021},   year = {2021},   note = {Zurich},   url = {https://user2021.r-project.org/participation/technical_notes/t164/technote/}, }"},{"path":[]},{"path":[]},{"path":"https://fbertran.github.io/networkABC/index.html","id":"frédéric-bertrand-and-myriam-maumy-bertrand","dir":"","previous_headings":"","what":"Frédéric Bertrand and Myriam Maumy-Bertrand","title":"Network Reverse Engineering with Approximate Bayesian Computation","text":"https://doi.org/10.32614/CRAN.package.networkABC goal networkABC provide inference tool based approximate Bayesian computation decipher network data assess strength inferred links. developed inference tool based approximate Bayesian computation decipher network data assess strength inferred links network’s actors. new multi-level approximate Bayesian computation (ABC) approach. first level, method captures global properties network, scale-freeness clustering coefficients, whereas second level targeted capture local properties, including probability couple genes linked. now, Approximate Bayesian Computation (ABC) algorithms scarcely used setting , due computational overhead, application limited small number genes. contrary, algorithm made cope issue low computational cost. can used, instance, elucidating gene regulatory network, important step towards understanding normal cell physiology complex pathological phenotype. Reverse-engineering consists using gene expressions time different experimental conditions discover structure gene network targeted cellular process. fact gene expression data usually noisy, highly correlated, high dimensionality explains need specific statistical methods reverse engineer underlying network. package accepted presentation useR! 2021 international conference. technical note package created published website conference. can accessed : https://user2021.r-project.org/participation/technical_notes/t164/technote/. website examples created F. Bertrand M. Maumy-Bertrand.","code":""},{"path":"https://fbertran.github.io/networkABC/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Network Reverse Engineering with Approximate Bayesian Computation","text":"can install released version networkABC CRAN : can install development version networkABC github :","code":"install.packages(\"networkABC\") devtools::install_github(\"fbertran/networkABC\")"},{"path":"https://fbertran.github.io/networkABC/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"Network Reverse Engineering with Approximate Bayesian Computation","text":"network_gen allows simulate networks given clustering coefficient. abc function performs network reverse engineering Approximate Bayesian Computation. showHp function plots hub probabilities. plot chunk showHp showNp function plots neighbourhood probabilities. plot chunk showNp showNetwork function plots final network. plot chunk showNetwork","code":"set.seed(314) library(networkABC) resnet <- network_gen(10,1) resnet #> $number_genes #> [1] 10 #>  #> $clust_coef #> [1] 1 #>  #> $network #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,]    0    0    0   -1    1    1    0    0   -1    -1 #>  [2,]    0    0    0    0    0    0    0    0    0     0 #>  [3,]    0    0    0    0    0    0    0    0    0     0 #>  [4,]    0    0    0    0    0    0    0    0    0     0 #>  [5,]    0    0    0    0    0    0    0    0    0     0 #>  [6,]    0    0    0    0    0    0   -1    0    0     1 #>  [7,]    0    0    0    0    0    0    0    0    0     0 #>  [8,]    1    0   -1    0    0    0    0    0    0     0 #>  [9,]    0    0    0    1    0    0    0    0    0     0 #> [10,]    0    1   -1    0    0    0    0    0    0     0 set.seed(314) M10<-matrix(rnorm(30),10,3) result<-abc(data=M10) #> First run of abc to find tolerance #> =============================== #> Iteration=1 #> Accepted:1000 #> Probabilities of clustering coefficients: #> 0.334000 0.345000 0.321000  #> Tolerance value #>       5%  #> 4.224594  #> =============================== #> Beginning main run of abc #> =============================== #> Iteration=1 #> Accepted:69 #> Probabilities of clustering coefficients: #> 0.362319 0.333333 0.304348  #> =============================== #> Iteration=2 #> Accepted:98 #> Probabilities of clustering coefficients: #> 0.377551 0.316327 0.306122  #> =============================== #> Iteration=3 #> Accepted:113 #> Probabilities of clustering coefficients: #> 0.495575 0.274336 0.230088  #> =============================== #> Iteration=4 #> Accepted:168 #> Probabilities of clustering coefficients: #> 0.613095 0.226190 0.160714  #> =============================== #> Iteration=5 #> Accepted:130 #> Probabilities of clustering coefficients: #> 0.700000 0.215385 0.084615  #> =============================== #> Iteration=6 #> Accepted:174 #> Probabilities of clustering coefficients: #> 0.712644 0.235632 0.051724  #> =============================== #> Iteration=7 #> Accepted:145 #> Probabilities of clustering coefficients: #> 0.737931 0.234483 0.027586  #> =============================== #> Iteration=8 #> Accepted:134 #> Probabilities of clustering coefficients: #> 0.798507 0.179104 0.022388  #> =============================== #> Iteration=9 #> Accepted:143 #> Probabilities of clustering coefficients: #> 0.825175 0.167832 0.006993  #> =============================== #> Iteration=10 #> Accepted:189 #> Probabilities of clustering coefficients: #> 0.851852 0.142857 0.005291 showHp(result) #>   gene.hubs hubs.proba #> 1         4  0.1640212 #> 2         6  0.2627866 #> 3         8  0.2310406 showNp(result) showNetwork(result,.2)"},{"path":"https://fbertran.github.io/networkABC/reference/abc.html","id":null,"dir":"Reference","previous_headings":"","what":"ABC algorithm for network reverse-engineering — abc","title":"ABC algorithm for network reverse-engineering — abc","text":"ABC algorithm network reverse-engineering","code":""},{"path":"https://fbertran.github.io/networkABC/reference/abc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ABC algorithm for network reverse-engineering — abc","text":"","code":"abc(   data,   clust_coeffs = c(0.33, 0.66, 1),   tolerance = NA,   number_hubs = NA,   iterations = 10,   number_networks = 1000,   hub_probs = NA,   neighbour_probs = NA,   is_probs = 1 )"},{"path":"https://fbertran.github.io/networkABC/reference/abc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ABC algorithm for network reverse-engineering — abc","text":"data : microarray data form matrix (rows genes columns time points) clust_coeffs : one dimensional array size clust_size clustering coefficients (clustering coefficient tested ABc algorithm). tolerance : positive real value based tolerance generated networks reference network number_hubs : number hubs network iterations : number times repeat ABC algorithm number_networks : number generated networks iteration ABC algorithm hub_probs : one-dimensional array size number_genes label role hub neighbour_probs : matrix neighbour probabilities size number_nodes*number_nodes is_probs : needs set either one (specify hub_probs neighbour_probs) zero (neither probabilities specified). Warning: specify hub_probs neighbour_probs is_probs one. is_prob zero arrays simply indicate array specified size..","code":""},{"path":"https://fbertran.github.io/networkABC/reference/abc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ABC algorithm for network reverse-engineering — abc","text":"","code":"M<-matrix(rnorm(30),10,3) result<-abc(data=M) #> First run of abc to find tolerance #> =============================== #> Iteration=1 #> Accepted:1000 #> Probabilities of clustering coefficients: #> 0.360000 0.345000 0.295000  #> Tolerance value #>       5%  #> 4.754561  #> =============================== #> Beginning main run of abc #> =============================== #> Iteration=1 #> Accepted:51 #> Probabilities of clustering coefficients: #> 0.333333 0.490196 0.176471  #> =============================== #> Iteration=2 #> Accepted:108 #> Probabilities of clustering coefficients: #> 0.342593 0.490741 0.166667  #> =============================== #> Iteration=3 #> Accepted:130 #> Probabilities of clustering coefficients: #> 0.346154 0.523077 0.130769  #> =============================== #> Iteration=4 #> Accepted:139 #> Probabilities of clustering coefficients: #> 0.323741 0.553957 0.122302  #> =============================== #> Iteration=5 #> Accepted:155 #> Probabilities of clustering coefficients: #> 0.335484 0.529032 0.135484  #> =============================== #> Iteration=6 #> Accepted:130 #> Probabilities of clustering coefficients: #> 0.369231 0.461538 0.169231  #> =============================== #> Iteration=7 #> Accepted:143 #> Probabilities of clustering coefficients: #> 0.475524 0.391608 0.132867  #> =============================== #> Iteration=8 #> Accepted:153 #> Probabilities of clustering coefficients: #> 0.535948 0.339869 0.124183  #> =============================== #> Iteration=9 #> Accepted:229 #> Probabilities of clustering coefficients: #> 0.628821 0.296943 0.074236  #> =============================== #> Iteration=10 #> Accepted:234 #> Probabilities of clustering coefficients: #> 0.675214 0.273504 0.051282"},{"path":"https://fbertran.github.io/networkABC/reference/clusteringCoefficient.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the clustering coefficient — clusteringCoefficient","title":"Calculate the clustering coefficient — clusteringCoefficient","text":"Calculate clustering coefficient adjacency matrix. default, local clustering coefficient calculated. PCIT package archived CRAN.","code":""},{"path":"https://fbertran.github.io/networkABC/reference/clusteringCoefficient.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the clustering coefficient — clusteringCoefficient","text":"","code":"clusteringCoefficient(adj, FUN = \"localClusteringCoefficient\", ...)"},{"path":"https://fbertran.github.io/networkABC/reference/clusteringCoefficient.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the clustering coefficient — clusteringCoefficient","text":"adj adjacency matrix. Calculating clustering coefficient makes sense connections zero .e. connection. FUN function calculating clustering coefficient. ... Arguments pass FUN","code":""},{"path":"https://fbertran.github.io/networkABC/reference/clusteringCoefficient.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the clustering coefficient — clusteringCoefficient","text":"clustering coefficient(s) adjacency matrix.","code":""},{"path":[]},{"path":"https://fbertran.github.io/networkABC/reference/clusteringCoefficient.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculate the clustering coefficient — clusteringCoefficient","text":"Nathan S. Watson-Haigh","code":""},{"path":"https://fbertran.github.io/networkABC/reference/clusteringCoefficient.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the clustering coefficient — clusteringCoefficient","text":"","code":"clusteringCoefficient(network_gen(50,.33)$network) #>  [1]  0.50000000  0.33333333  0.00000000         NaN  0.00000000  0.00000000 #>  [7]         NaN  0.50000000  0.00000000         NaN  0.33333333  0.08333333 #> [13]  0.00000000  0.15000000  0.16666667 -0.50000000  0.00000000 -0.50000000 #> [19]  0.00000000  0.00000000  0.00000000         NaN  0.50000000         NaN #> [25]         NaN  0.16666667         NaN  0.50000000  0.50000000  0.00000000 #> [31]         NaN  0.50000000  0.04444444         NaN  0.16666667  0.00000000 #> [37]  0.00000000  0.16666667  0.06666667         NaN         NaN  0.02380952 #> [43]  0.50000000  0.00000000  0.00000000  0.00000000  0.00000000  0.06666667 #> [49]         NaN  0.50000000"},{"path":"https://fbertran.github.io/networkABC/reference/localClusteringCoefficient.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the local clustering coefficient — localClusteringCoefficient","title":"Calculate the local clustering coefficient — localClusteringCoefficient","text":"Calculate local clustering coefficient node adjacency matrix. clustering coefficient defined proportion existing connections total possible (Watts Strogatz, 1998).","code":""},{"path":"https://fbertran.github.io/networkABC/reference/localClusteringCoefficient.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the local clustering coefficient — localClusteringCoefficient","text":"","code":"localClusteringCoefficient(adj)"},{"path":"https://fbertran.github.io/networkABC/reference/localClusteringCoefficient.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the local clustering coefficient — localClusteringCoefficient","text":"adj adjacency matrix. Calculating clustering coefficient makes sense connections zero .e. connection.","code":""},{"path":"https://fbertran.github.io/networkABC/reference/localClusteringCoefficient.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the local clustering coefficient — localClusteringCoefficient","text":"vector local clustering coefficients node/gene adjacency matrix.","code":""},{"path":"https://fbertran.github.io/networkABC/reference/localClusteringCoefficient.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate the local clustering coefficient — localClusteringCoefficient","text":"D.J. Watts S.H. Strogatz. (1998) Collective dynamics 'small-world' networks. Nature. 393(6684). 440-442.","code":""},{"path":[]},{"path":"https://fbertran.github.io/networkABC/reference/localClusteringCoefficient.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculate the local clustering coefficient — localClusteringCoefficient","text":"Nathan S. Watson-Haigh","code":""},{"path":"https://fbertran.github.io/networkABC/reference/localClusteringCoefficient.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the local clustering coefficient — localClusteringCoefficient","text":"","code":"localClusteringCoefficient(network_gen(50,.33)$network) #>  [1]  0.05000000  0.33333333  0.00000000  0.04444444         NaN  0.50000000 #>  [7]  0.50000000  0.50000000  0.33333333  0.16666667  0.00000000  0.05000000 #> [13]  0.00000000  0.00000000         NaN  0.50000000 -0.50000000  0.00000000 #> [19]  0.00000000 -0.50000000         NaN  0.00000000         NaN  0.00000000 #> [25]  0.03333333  0.00000000  0.16666667  0.07142857  0.50000000  0.50000000 #> [31]  0.50000000  0.00000000         NaN         NaN  0.16666667  0.03333333 #> [37]  0.50000000  0.00000000  0.16666667         NaN  0.16666667  0.16666667 #> [43]         NaN         NaN  0.50000000  0.00000000 -0.50000000         NaN #> [49]  0.10000000  0.00000000"},{"path":"https://fbertran.github.io/networkABC/reference/netsimul.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulated network — netsimul","title":"Simulated network — netsimul","text":"Result use network_gen function.","code":""},{"path":"https://fbertran.github.io/networkABC/reference/netsimul.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulated network — netsimul","text":"","code":"netsimul"},{"path":"https://fbertran.github.io/networkABC/reference/netsimul.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Simulated network — netsimul","text":"list three objects : number_genes number genes network clust_coef clustering coefficient network simulated network","code":""},{"path":"https://fbertran.github.io/networkABC/reference/networkABC-package.html","id":null,"dir":"Reference","previous_headings":"","what":"networkABC: Network Reverse Engineering with Approximate Bayesian Computation — networkABC-package","title":"networkABC: Network Reverse Engineering with Approximate Bayesian Computation — networkABC-package","text":"developed inference tool based approximate Bayesian computation decipher network data assess strength inferred links network's actors. new multi-level approximate Bayesian computation (ABC) approach. first level, method captures global properties network, scale-free structure clustering coefficients, whereas second level targeted capture local properties, including probability couple genes linked. now, Approximate Bayesian Computation (ABC) algorithms scarcely used setting , due computational overhead, application limited small number genes. contrary, algorithm made cope issue low computational cost. can used, instance, elucidating gene regulatory network, important step towards understanding normal cell physiology complex pathological phenotype. Reverse-engineering consists using gene expressions time different experimental conditions discover structure gene network targeted cellular process. fact gene expression data usually noisy, highly correlated, high dimensionality explains need specific statistical methods reverse engineer underlying network.","code":""},{"path":"https://fbertran.github.io/networkABC/reference/networkABC-package.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"networkABC: Network Reverse Engineering with Approximate Bayesian Computation — networkABC-package","text":"networkABC: inference tool networks based approximate Bayesian computation, Myriam Maumy-Bertrand, Frédéric Bertrand, preprint.","code":""},{"path":[]},{"path":"https://fbertran.github.io/networkABC/reference/networkABC-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"networkABC: Network Reverse Engineering with Approximate Bayesian Computation — networkABC-package","text":"Maintainer: Frederic Bertrand frederic.bertrand@lecnam.net (ORCID) Authors: Myriam Maumy-Bertrand myriam.maumy@ehesp.fr (ORCID) contributors: Khadija Musayeva khadija@musayeva.net [contributor] Nicolas Jung nicolas.jung@unistra.fr [contributor] Université de Strasbourg [copyright holder] CNRS [copyright holder]","code":""},{"path":"https://fbertran.github.io/networkABC/reference/network_gen.html","id":null,"dir":"Reference","previous_headings":"","what":"Random scale-free network generation. This function is used intensively in the abc function. — network_gen","title":"Random scale-free network generation. This function is used intensively in the abc function. — network_gen","text":"Generate random network topology","code":""},{"path":"https://fbertran.github.io/networkABC/reference/network_gen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random scale-free network generation. This function is used intensively in the abc function. — network_gen","text":"","code":"network_gen(number_genes, clust_coef)"},{"path":"https://fbertran.github.io/networkABC/reference/network_gen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random scale-free network generation. This function is used intensively in the abc function. — network_gen","text":"number_genes number clust_coef number","code":""},{"path":"https://fbertran.github.io/networkABC/reference/network_gen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random scale-free network generation. This function is used intensively in the abc function. — network_gen","text":"list number genes, targeted clustering coefficient resulting network","code":""},{"path":"https://fbertran.github.io/networkABC/reference/network_gen.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random scale-free network generation. This function is used intensively in the abc function. — network_gen","text":"","code":"network_gen(10,1) #> $number_genes #> [1] 10 #>  #> $clust_coef #> [1] 1 #>  #> $network #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,]    0    0    0    0    0    0    1    0    0     0 #>  [2,]    0    0    0    0    0    0    0    0    0     0 #>  [3,]    1    0    0    0    0    0    0    0    0     0 #>  [4,]    0    0    0    0    0    0    0    0    0     0 #>  [5,]    0    0    0    0    0    0    0    0    0     0 #>  [6,]    0    1    0    0    0    0    0    0    0     0 #>  [7,]    0    0    1    0    0    0    0    0    0     0 #>  [8,]    0    0    0    0    0    0    0    0    0     0 #>  [9,]    0    0    1    0    0    0    1    0    0     0 #> [10,]    0    0    0    1   -1   -1    0    1   -1     0 #>"},{"path":"https://fbertran.github.io/networkABC/reference/resabc.html","id":null,"dir":"Reference","previous_headings":"","what":"Result of an ABC inference — resabc","title":"Result of an ABC inference — resabc","text":"Result reverse engineering simulated Cascade network","code":""},{"path":"https://fbertran.github.io/networkABC/reference/resabc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Result of an ABC inference — resabc","text":"","code":"resabc"},{"path":"https://fbertran.github.io/networkABC/reference/resabc.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Result of an ABC inference — resabc","text":"list 14 objects : data : microarray data used, rows genes columns time points.) ngenes : number genes.) ntimes : number timepoints) clust_size : size clusters clust_coeffs : clustering coefficient tolerance : tolerance generated networks reference network number_hubs : number hubs network iterations : number times repeat ABC algorithm number_networks : number generated networks iteration ABC algorithm hub_probs : one-dimensional array size number_genes label role hub neighbour_probs : matrix neighbour probabilities size number_nodes*number_nodes is_probs : equal 1 since hub_probs neighbour_probs specified","code":""},{"path":"https://fbertran.github.io/networkABC/reference/showHp.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot for the hub probabilities — showHp","title":"Plot for the hub probabilities — showHp","text":"Plot hub probabilities ; one probability node network.","code":""},{"path":"https://fbertran.github.io/networkABC/reference/showHp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot for the hub probabilities — showHp","text":"","code":"showHp(result)"},{"path":"https://fbertran.github.io/networkABC/reference/showHp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot for the hub probabilities — showHp","text":"result : result abc algorithm.","code":""},{"path":"https://fbertran.github.io/networkABC/reference/showHp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot for the hub probabilities — showHp","text":"","code":"data(resabc) showHp(resabc)  #>   gene.hubs hubs.proba #> 1         4  0.2687793 #> 2         5  0.2077465 #> 3        10  0.2488263"},{"path":"https://fbertran.github.io/networkABC/reference/showNetwork.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the final network. — showNetwork","title":"Plot the final network. — showNetwork","text":"Plot final network.","code":""},{"path":"https://fbertran.github.io/networkABC/reference/showNetwork.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the final network. — showNetwork","text":"","code":"showNetwork(res, min_prob)"},{"path":"https://fbertran.github.io/networkABC/reference/showNetwork.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the final network. — showNetwork","text":"res : result abc algorithm. min_prob : numeric ; probabilitie value, link two genes set 0.","code":""},{"path":"https://fbertran.github.io/networkABC/reference/showNetwork.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the final network. — showNetwork","text":"","code":"data(resabc) showNetwork(resabc,.2)"},{"path":"https://fbertran.github.io/networkABC/reference/showNp.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot for the neighbourhood probabilities — showNp","title":"Plot for the neighbourhood probabilities — showNp","text":"Plot neighbourhood probabilities ; one probability pair node network.","code":""},{"path":"https://fbertran.github.io/networkABC/reference/showNp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot for the neighbourhood probabilities — showNp","text":"","code":"showNp(result)"},{"path":"https://fbertran.github.io/networkABC/reference/showNp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot for the neighbourhood probabilities — showNp","text":"result : result abc algorithm.","code":""},{"path":"https://fbertran.github.io/networkABC/reference/showNp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot for the neighbourhood probabilities — showNp","text":"","code":"data(resabc) showNp(resabc)"},{"path":"https://fbertran.github.io/networkABC/news/index.html","id":"networkabc-09-1","dir":"Changelog","previous_headings":"","what":"networkABC 0.9-1","title":"networkABC 0.9-1","text":"Maintainer email updated Added package doi","code":""},{"path":"https://fbertran.github.io/networkABC/news/index.html","id":"networkabc-09-0","dir":"Changelog","previous_headings":"","what":"networkABC 0.9-0","title":"networkABC 0.9-0","text":"CRAN release: 2025-08-28 Added unit tests Improved C code : error catching contiguous 2D allocation Fixed citation file","code":""},{"path":"https://fbertran.github.io/networkABC/news/index.html","id":"networkabc-08-1","dir":"Changelog","previous_headings":"","what":"networkABC 0.8-1","title":"networkABC 0.8-1","text":"CRAN release: 2022-10-18 Fix warnings C code requested CRAN maintainers.","code":""},{"path":"https://fbertran.github.io/networkABC/news/index.html","id":"networkabc-08-0","dir":"Changelog","previous_headings":"","what":"networkABC 0.8-0","title":"networkABC 0.8-0","text":"CRAN release: 2021-03-20 Add badges, logo update pkgdown site Add github actions","code":""},{"path":"https://fbertran.github.io/networkABC/news/index.html","id":"networkabc-07-0","dir":"Changelog","previous_headings":"","what":"networkABC 0.7-0","title":"networkABC 0.7-0","text":"CRAN release: 2020-03-03 Function added code due PCIT package archived CRAN.","code":""},{"path":"https://fbertran.github.io/networkABC/news/index.html","id":"networkabc-06-0","dir":"Changelog","previous_headings":"","what":"networkABC 0.6-0","title":"networkABC 0.6-0","text":"CRAN release: 2020-02-07 Code update due CRAN requirements.","code":""},{"path":"https://fbertran.github.io/networkABC/news/index.html","id":"networkabc-05-3","dir":"Changelog","previous_headings":"","what":"networkABC 0.5-3","title":"networkABC 0.5-3","text":"CRAN release: 2019-03-06 Detailed description package Added copyright holders","code":""},{"path":"https://fbertran.github.io/networkABC/news/index.html","id":"networkabc-05-2","dir":"Changelog","previous_headings":"","what":"networkABC 0.5-2","title":"networkABC 0.5-2","text":"Added citation package","code":""},{"path":"https://fbertran.github.io/networkABC/news/index.html","id":"networkabc-05-1","dir":"Changelog","previous_headings":"","what":"networkABC 0.5-1","title":"networkABC 0.5-1","text":"Updated code add R_forceSymbols(dll, TRUE) Vignette typos English improvements","code":""},{"path":"https://fbertran.github.io/networkABC/news/index.html","id":"networkabc-05-0","dir":"Changelog","previous_headings":"","what":"networkABC 0.5-0","title":"networkABC 0.5-0","text":"Added R_registerRoutines Use R random numbers generation instead rand srand Rprintf Use Rprintf direct C code outputs R console","code":""},{"path":"https://fbertran.github.io/networkABC/news/index.html","id":"networkabc-04-0","dir":"Changelog","previous_headings":"","what":"networkABC 0.4-0","title":"networkABC 0.4-0","text":"commented printf abc_R.c, graph.c, network_random_R.C (CRAN requirement) removed [-Wunused-variable] (others) warnings","code":""},{"path":"https://fbertran.github.io/networkABC/news/index.html","id":"networkabc-03-0","dir":"Changelog","previous_headings":"","what":"networkABC 0.3-0","title":"networkABC 0.3-0","text":"bug fix enable C code compatibility macos","code":""},{"path":"https://fbertran.github.io/networkABC/news/index.html","id":"networkabc-02-0","dir":"Changelog","previous_headings":"","what":"networkABC 0.2-0","title":"networkABC 0.2-0","text":"vignette created","code":""},{"path":"https://fbertran.github.io/networkABC/news/index.html","id":"networkabc-01-1","dir":"Changelog","previous_headings":"","what":"networkABC 0.1-1","title":"networkABC 0.1-1","text":"Added readme, examples website. Code updated R 3.5.2","code":""},{"path":"https://fbertran.github.io/networkABC/news/index.html","id":"networkabc-00-1","dir":"Changelog","previous_headings":"","what":"networkABC 0.0-1","title":"networkABC 0.0-1","text":"First release package. Added NEWS.md file track changes package.","code":""}]
